// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import limit "github.com/slok/goresilience/concurrencylimit/limit"
import mock "github.com/stretchr/testify/mock"
import time "time"

// Limiter is an autogenerated mock type for the Limiter type
type Limiter struct {
	mock.Mock
}

// GetLimit provides a mock function with given fields:
func (_m *Limiter) GetLimit() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MeasureSample provides a mock function with given fields: startTime, inflight, result
func (_m *Limiter) MeasureSample(startTime time.Time, inflight int, result limit.Result) int {
	ret := _m.Called(startTime, inflight, result)

	var r0 int
	if rf, ok := ret.Get(0).(func(time.Time, int, limit.Result) int); ok {
		r0 = rf(startTime, inflight, result)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}
